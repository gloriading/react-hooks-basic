{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","hooks/useLocalStorage.js","hooks/useRandomColor.js","App.js","hooks/useMessage.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","style","padding","className","type","placeholder","onChange","target","TodoItem","todo","updateTodo","index","removeTodo","content","isComplete","marginTop","onClick","watch","color","setColor","useEffect","colors","Math","floor","random","length","getRandomColor","localStorage","setItem","JSON","stringify","App","key","initialValue","getItem","parse","storage","setStorage","valOrFunction","valueToStore","Function","useLocalStorage","todos","setTodos","backgroundColor","useRandomColor","shouldShow","condition","isVisible","setIsVisible","setTimeout","useMessage","mainFrameStyle","minHeight","transition","todosClone","prev","filter","idx","margin","fontWeight","newTodoContent","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAEe,SAASA,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EAClBC,mBAAS,IADS,mBACrCC,EADqC,KAC9BC,EAD8B,KAe5C,OACE,0BAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACGJ,IAELF,EAAQE,GACRC,EAAS,MAIqBI,MAbd,CAChBC,QAAS,SAaP,wDACA,2BACEC,UAAU,aACVC,KAAK,OACLC,YAAY,kBACZT,MAAOA,EACPU,SAAU,SAAAP,GAAC,OAAIF,EAASE,EAAEQ,OAAOX,WCvB1B,SAASY,EAAT,GAA4D,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WAE1D,OACE,yBAAKT,UAAU,kBACb,yCAAgBM,EAAKI,SACrB,2BACIJ,EAAKK,WAAa,WAAa,gBAEnC,yBAAKb,MAAO,CAAEc,UAAW,SACvB,4BAAQZ,UAAU,cAChBa,QAAS,kBAAMN,EAAWC,KAD5B,iBAIA,4BAAQR,UAAU,cAChBa,QAAS,kBAAMJ,EAAWD,KAD5B,YCbO,ICAA,WAASM,GAAO,IAAD,EACFtB,mBAAS,QADP,mBACrBuB,EADqB,KACdC,EADc,KAe5B,OALAC,qBAAU,WACRD,EARqB,WACrB,IAAME,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAG5D,OAAOA,EAFaC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,EAAOI,UAMxDC,IACTC,aAAaC,QAAQ,YAAaC,KAAKC,UAAUb,MAChD,CAACA,IAEGC,GC2DMa,MArEf,WACE,IADa,EFLA,SAASC,EAAKC,GAAe,IAAD,EACXtC,oBAAS,WACrC,OAAIgC,aAAaO,QAAQF,GAChBH,KAAKM,MAAMR,aAAaO,QAAQF,IAGlCC,KANgC,mBAClCG,EADkC,KACzBC,EADyB,KAgBzC,MAAO,CAACD,EAPR,SAAkBE,GAChB,IAAMC,EAAeD,aAAyBE,SAAWF,EAAcF,GAAWE,EAElFD,EAAWE,GACXZ,aAAaC,QAAQI,EAAKH,KAAKC,UAAUS,MEIjBE,CAAgB,YAXrB,CACnB,CACE5B,QAAS,YACTC,YAAY,GAEd,CACED,QAAS,YACTC,YAAY,KARH,mBAYN4B,EAZM,KAYCC,EAZD,KAcPC,EAAkBC,EAAeH,GAEjCI,ECrBO,SAAoBC,GAAY,IAAD,EACVpD,oBAAS,GADC,mBACrCqD,EADqC,KAC1BC,EAD0B,KAQ5C,OALA7B,qBAAU,WACR6B,GAAa,GACbC,YAAW,kBAAMD,GAAa,KAAQ,OACrC,CAACF,IAEGC,EDaYG,CAAWT,GAExBU,EAAiB,CACrBlD,QAAS,OACT0C,gBAAiBA,EACjBS,UAAW,QACXC,WAAY,MAGR5C,EAAa,SAAAC,GACjB,IAAM4C,EAAU,YAAOb,GACvBa,EAAW5C,GAAOG,YAAcyC,EAAW5C,GAAOG,WAElD6B,EAASY,IAOL3C,EAAa,SAAAD,GACjBgC,GAAS,SAAAa,GAAI,OAAIA,EAAKC,QAAO,SAAChD,EAAMiD,GAAP,OAAeA,IAAQ/C,SAGtD,OACE,yBAAKV,MAAOmD,GACV,wBAAInD,MAAO,CAAE0D,OAAQ,WAArB,QACO,0BAAM1D,MAAO,CAAEiB,MAAO,SAAtB,eAEP,wBACEf,UAAW2C,EAAa,GAAK,SAC7B7C,MAAO,CAAE2D,WAAY,MAFvB,iCAOA,kBAACnE,EAAD,CAAUC,QApBE,SAAAmE,GACdlB,GAAS,SAAAa,GAAI,4BAAQA,GAAR,CAAc,CAAE3C,QAASgD,EAAgB/C,YAAY,WAqBhE,yBAAKb,MAAO,CAAEc,UAAW,SACtB2B,EAAMoB,KAAI,SAACrD,EAAME,GAAP,OACT,kBAACH,EAAD,CACEwB,IAAKrB,EACLA,MAAOA,EACPF,KAAMA,EACNC,WAAYA,EACZE,WAAYA,UExDJmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c11bbc13.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function TodoForm({ addTodo }) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const formStyle = {\r\n    padding: '1rem',\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n\r\n    addTodo(value);\r\n    setValue('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={ formStyle }>\r\n      <label>What do I need to do?</label>\r\n      <input\r\n        className=\"text-input\"\r\n        type=\"text\"\r\n        placeholder=\"Enter a todo...\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value) } />\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default function TodoItem({ todo, updateTodo, index, removeTodo }) {\r\n\r\n  return (\r\n    <div className=\"item-container\">\r\n      <p>Todo item: { todo.content }</p>\r\n      <p>\r\n        { todo.isComplete ? 'Complete' : 'Not Complete' }\r\n      </p>\r\n      <div style={{ marginTop: '2rem' }}>\r\n        <button className=\"button-base\"\r\n          onClick={() => updateTodo(index)}>\r\n            Update Status\r\n        </button>\r\n        <button className=\"button-base\"\r\n          onClick={() => removeTodo(index)}>\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport default function(key, initialValue) {\r\n  const [storage, setStorage] = useState(() => {\r\n    if (localStorage.getItem(key)) {\r\n      return JSON.parse(localStorage.getItem(key));\r\n    } \r\n    \r\n    return initialValue;\r\n  });\r\n\r\n  function setValue(valOrFunction) {\r\n    const valueToStore = valOrFunction instanceof Function ? valOrFunction(storage) : valOrFunction;\r\n\r\n    setStorage(valueToStore);\r\n    localStorage.setItem(key, JSON.stringify(valueToStore))\r\n  }\r\n\r\n  return [storage, setValue];\r\n}","import { useState, useEffect } from 'react'\r\n\r\nexport default function(watch){\r\n  const [color, setColor] = useState('pink');\r\n\r\n  const getRandomColor = () => {\r\n    const colors = ['#f8a5c2', '#f7d794', '#f3a683', '#D1C4E9', '#D7CCC8'];\r\n    const randomIndex = Math.floor(Math.random() * Math.floor(colors.length));\r\n  \r\n    return colors[randomIndex];\r\n  };\r\n\r\n  useEffect(() => {\r\n    setColor(getRandomColor());\r\n    localStorage.setItem('hooksTodo', JSON.stringify(watch));\r\n  }, [watch]);\r\n\r\n  return color;\r\n}\r\n","import React from 'react';\r\nimport TodoForm from './components/TodoForm';\r\nimport TodoItem from './components/TodoItem';\r\nimport useMessage from './hooks/useMessage';\r\nimport useLocalStorage from './hooks/useLocalStorage'\r\nimport useRandomColor from './hooks/useRandomColor'\r\n\r\nfunction App() {\r\n  const initialValue = [\r\n    {\r\n      content: 'Do dishes',\r\n      isComplete: false,\r\n    },\r\n    {\r\n      content: 'Buy fruit',\r\n      isComplete: false,\r\n    },\r\n  ]\r\n\r\n  const [todos, setTodos] = useLocalStorage('hooksTodo', initialValue)\r\n\r\n  const backgroundColor = useRandomColor(todos)\r\n\r\n  const shouldShow = useMessage(todos)\r\n\r\n  const mainFrameStyle = {\r\n    padding: '2rem',\r\n    backgroundColor: backgroundColor,\r\n    minHeight: '100vh',\r\n    transition: '1s',\r\n  };\r\n\r\n  const updateTodo = index => {\r\n    const todosClone = [...todos];\r\n    todosClone[index].isComplete = !todosClone[index].isComplete;\r\n\r\n    setTodos(todosClone);\r\n  };\r\n\r\n  const addTodo = newTodoContent => {\r\n    setTodos(prev => [...prev, { content: newTodoContent, isComplete: false }]);\r\n  };\r\n\r\n  const removeTodo = index => {\r\n    setTodos(prev => prev.filter((todo, idx) => idx !== index));\r\n  };\r\n\r\n  return (\r\n    <div style={mainFrameStyle}>\r\n      <h1 style={{ margin: '2rem 0' }}>\r\n        TODO <span style={{ color: 'grey' }}>WITH HOOKS</span>\r\n      </h1>\r\n      <h2\r\n        className={shouldShow ? '' : 'hidden'}\r\n        style={{ fontWeight: 200 }}\r\n      >\r\n        You just updated your todos !\r\n      </h2>\r\n\r\n      <TodoForm addTodo={addTodo} />\r\n\r\n      <div style={{ marginTop: '2rem' }}>\r\n        {todos.map((todo, index) => (\r\n          <TodoItem\r\n            key={index}\r\n            index={index}\r\n            todo={todo}\r\n            updateTodo={updateTodo}\r\n            removeTodo={removeTodo}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useMessage(condition) {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsVisible(true);\r\n    setTimeout(() => setIsVisible(false), 500);\r\n  }, [condition])\r\n\r\n  return isVisible;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}